#!/bin/env python3

import logging
import argparse
import re


def setup_logger():
    FORMAT = r"[%(asctime)-15s] %(levelname)s - %(message)s"
    DATE_FORMAT = r"%Y-%m-%d %H:%M:%S"
    logging.basicConfig(level=logging.INFO, format=FORMAT, datefmt=DATE_FORMAT)


log = logging.getLogger()


if __name__ == "__main__":
    setup_logger()

    parser = argparse.ArgumentParser(
        "Extracts function offsets from objdump disassembly"
    )

    parser.add_argument(
        "--disassembly",
        metavar="FILE",
        help="Specify the file containing disassembly generated by objdump",
        required=True,
    )
    parser.add_argument(
        "--output",
        metavar="FILE",
        help="Specify the file to be written",
        required=True,
    )
    args = parser.parse_args()

    pat = re.compile("^([0-9a-fA-F]+) <([a-zA-Z0-9_.]+)>:\s*$")
    function_map = {}
    image_base = 0xFFFFFFFF
    with open(args.disassembly) as f:
        for line in f.readlines():
            line = line[:-1]
            res = pat.match(line)
            if res:
                addr = int(res.group(1), 16)
                name = res.group(2)
                if addr < image_base:
                    image_base = addr
                function_map[addr] = name
    with open(args.output, "w") as f:
        for key in function_map:
            f.write(f"0x{key-image_base:04X} {function_map[key]}\n")
